package dao;

import com.example.dao.TutorialDAO;
import com.example.dao.TutorialDAOImpl;
import com.example.exceptions.DatabaseOperationException;
import com.example.exceptions.TutorialNotFoundException;
import com.example.model.Tutorial;
import com.example.util.DBConnection;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.ArrayList;

import static org.junit.jupiter.api.Assertions.*;

@DisplayName("TutorialDAOImpl Integration Tests")
public class TutorialDAOImplTest {
    private TutorialDAO tutorialDAO;
    @BeforeEach
    void setUp() throws SQLException {
        tutorialDAO = new TutorialDAOImpl();
        // Clear the table before each test to ensure a clean state
        try (Connection conn = DBConnection.getConnection();
             Statement stmt = conn.createStatement()) {
            stmt.executeUpdate("DELETE FROM tutorials"); // Deletes all rows
    // Optionally, reset sequence if using an older Oracle version without GENERATED BY DEFAULT
    // try {
            // stmt.executeUpdate("DROP SEQUENCE tutorial_id_seq");
            //stmt.executeUpdate("CREATE SEQUENCE tutorial_id_seq START WITH 1 INCREMENT BY 1 NOCACHE");
    // } catch (SQLException e) {
                    // Ignore if sequence doesn't exist or cannot be dropped/created (e.g., first run)
    // System.out.println("Could not reset sequence (might not exist or permissions issue): " + e.getMessage());
    // }
        } catch (SQLException e) {
            System.err.println("Failed to clear database before test: " + e.getMessage());
            throw e; // Re-throw to fail the test setup
        }
    }
    @AfterEach
    void tearDown() {
// Optional: Could clear table again here if needed, but BeforeEach is usually enough
// Or perform any resource cleanup if not handled by try-with resources
    }

    @Test
    @DisplayName("Should add a new tutorial successfully")
    void shouldAddTutorialSuccessfully() throws
            DatabaseOperationException, TutorialNotFoundException {
        Tutorial tutorial = new Tutorial("Test Title", "Test Author",
                "http://test.com", LocalDate.now());
        tutorialDAO.addTutorial(tutorial);
        assertNotEquals(0, tutorial.getId(), "Tutorial ID should be generated and not 0");
        Tutorial retrievedTutorial = tutorialDAO.getTutorialById(tutorial.getId());
        assertNotNull(retrievedTutorial);
        assertEquals(tutorial.getTitle(), retrievedTutorial.getTitle());
        assertEquals(tutorial.getAuthor(), retrievedTutorial.getAuthor());
        assertEquals(tutorial.getUrl(), retrievedTutorial.getUrl());
        assertEquals(tutorial.getPublishedDate(),
                retrievedTutorial.getPublishedDate());
    }
    @Test
    @DisplayName("Should retrieve a tutorial by ID")
    void shouldGetTutorialById() throws DatabaseOperationException,
            TutorialNotFoundException {
        Tutorial tutorial = new Tutorial("Get By ID Title", "Get By ID Author", "http://getbyid.com", LocalDate.of(2023, 10, 26));
        tutorialDAO.addTutorial(tutorial);
        Tutorial retrievedTutorial =
                tutorialDAO.getTutorialById(tutorial.getId());
        assertNotNull(retrievedTutorial);
        assertEquals(tutorial.getId(), retrievedTutorial.getId());
        assertEquals("Get By ID Title", retrievedTutorial.getTitle());
    }

    @Test
    @DisplayName("Should throw TutorialNotFoundException when getting non-existent ID")
    void
    shouldThrowTutorialNotFoundExceptionWhenGettingNonExistentId() {
        assertThrows(TutorialNotFoundException.class, () ->
                        tutorialDAO.getTutorialById(999),
                "Should throw TutorialNotFoundException for a non-existent ID");
    }
    @Test
    @DisplayName("Should retrieve all tutorials when table is empty")
    void shouldGetAllTutorialsWhenEmpty() throws
            DatabaseOperationException {
        ArrayList<Tutorial> tutorials = tutorialDAO.getAllTutorials();
        assertNotNull(tutorials);
        assertTrue(tutorials.isEmpty(), "ArrayList should be empty when no tutorials are added");
    }
    @Test
    @DisplayName("Should retrieve all tutorials when table has data")
    void shouldGetAllTutorialsWithData() throws
            DatabaseOperationException {
        tutorialDAO.addTutorial(new Tutorial("Tut 1", "Auth 1", "url1",
                LocalDate.now()));
        tutorialDAO.addTutorial(new Tutorial("Tut 2", "Auth 2", "url2",
                LocalDate.now()));
        ArrayList<Tutorial> tutorials = tutorialDAO.getAllTutorials();
        assertNotNull(tutorials);
        assertEquals(2, tutorials.size());
    }
    @Test
    @DisplayName("Should update an existing tutorial successfully")
    void shouldUpdateTutorialSuccessfully() throws
            DatabaseOperationException, TutorialNotFoundException {
        Tutorial originalTutorial = new Tutorial("Old Title", "Old Author",
                "http://old.com", LocalDate.of(2020, 1, 1));
        tutorialDAO.addTutorial(originalTutorial);
        Tutorial updatedTutorial = new Tutorial(originalTutorial.getId(), "New Title", "New Author", "http://new.com", LocalDate.of(2021, 2, 2));
        tutorialDAO.updateTutorial(updatedTutorial);
        Tutorial retrievedTutorial =
                tutorialDAO.getTutorialById(originalTutorial.getId());
        assertEquals("New Title", retrievedTutorial.getTitle());
        assertEquals("New Author", retrievedTutorial.getAuthor());
        assertEquals("http://new.com", retrievedTutorial.getUrl());
        assertEquals(LocalDate.of(2021, 2, 2),
                retrievedTutorial.getPublishedDate());
    }

    @Test
    @DisplayName("Should throw TutorialNotFoundException when updating non-existent tutorial")
    void
    shouldThrowTutorialNotFoundExceptionWhenUpdatingNonExistentTutorial(
    ) {
        Tutorial nonExistentTutorial = new Tutorial(999, "Non Existent",
                "None", "none.com", LocalDate.now());
        assertThrows(TutorialNotFoundException.class, () ->
                        tutorialDAO.updateTutorial(nonExistentTutorial),
                "Should throw TutorialNotFoundException for updating a non existent tutorial");
    }
    @Test
    @DisplayName("Should delete an existing tutorial successfully")
    void shouldDeleteTutorialSuccessfully() throws
            DatabaseOperationException, TutorialNotFoundException {
        Tutorial tutorialToDelete = new Tutorial("To Delete", "Delete Author",
                "http://delete.com", LocalDate.now());
        tutorialDAO.addTutorial(tutorialToDelete);
        Tutorial retrieved =
                tutorialDAO.getTutorialById(tutorialToDelete.getId()); // Verify it exists
        assertNotNull(retrieved);
        tutorialDAO.deleteTutorial(tutorialToDelete.getId());
        assertThrows(TutorialNotFoundException.class, () ->
                        tutorialDAO.getTutorialById(tutorialToDelete.getId()),
                "Should throw TutorialNotFoundException after deleting tutorial");
    }

    @Test
    @DisplayName("Should throw TutorialNotFoundException when deleting non-existent tutorial")
    void
    shouldThrowTutorialNotFoundExceptionWhenDeletingNonExistentTutorial()
    {
        assertThrows(TutorialNotFoundException.class, () ->
                        tutorialDAO.deleteTutorial(9999),
                "Should throw TutorialNotFoundException for deleting a non existent ID");
    }
    @Test
    @DisplayName("Should handle null published date correctly")
    void shouldHandleNullPublishedDate() throws
            DatabaseOperationException, TutorialNotFoundException {
        Tutorial tutorial = new Tutorial("Null Date Tutorial", "Null Date Author", "http://nulldate.com", null);
        tutorialDAO.addTutorial(tutorial);
        Tutorial retrievedTutorial =
                tutorialDAO.getTutorialById(tutorial.getId());
        assertNotNull(retrievedTutorial);
        assertNull(retrievedTutorial.getPublishedDate());
// Update with a date
        retrievedTutorial.setPublishedDate(LocalDate.of(2024, 9, 20));
        tutorialDAO.updateTutorial(retrievedTutorial);
        Tutorial updatedAndRetrieved =
                tutorialDAO.getTutorialById(retrievedTutorial.getId());
        assertNotNull(updatedAndRetrieved.getPublishedDate());
        assertEquals(LocalDate.of(2024, 9, 20),
                updatedAndRetrieved.getPublishedDate());
    }
}

